%% ISS model
mu = 3.986004418E14 /1000^3;
deg = pi/180;

ISS = ISSClass();
ISS_OE = ISS.getOrbitalElements;

% anomalies = [-107, -104, -102].*deg;
anomalies = [254 256 258].*deg;

t = zeros(1, 3);
ISS_rho = zeros(3, 3);
rho = zeros(3, 3);

% TODO: find station position :( R
R = findStationPosition(phi, theta, Re, f, H);
% R = ones(3)*100;

for i = 1:3
    t(i) = anomaly2time(anomalies(i), ISS_OE, mu);

    currentRho = ISS.getStateVector(anomalies(i));
    ISS_rho(:, i) = currentRho(:, 1);

    rho(:, i) = position2dirCosine(ISS_rho(:, i), R(:,i));
end
t = t-t(1);

[r,v] = observation2state(R, rho, t, mu, true);
orbitalElements = state2orbitalElements(r, v, mu);
% plotFromOE(orbitalElements, mu, r)
plotFromOE(orbitalElements, mu, r)
ISS.setAnomaly(anomalies(2));
ISS.plot();

% calculating error [%]
measuredValues = [norm(r), norm(v), orbitalElements];
trueValues = [vecnorm(ISS.state), ISS.orbitalElements];
relativeErr = 100.*(measuredValues./trueValues-1);

fprintf(['Measured parameters:' ...
    'R(2) %f %% \n' ...
    'V(2) %f %% \n' ...
    'specific angular momentum %f %% \n' ...
    'inclination %f %% \n' ...
    'RA of ascending node %f %% \n' ...
    'eccentricity %f %% \n' ...
    'perigee argument %f %% \n' ...
    'true anomaly(2) %f %% \n'], ...
    measuredValues);

fprintf(['Real parameters:' ...
    'R(2) %f %% \n' ...
    'V(2) %f %% \n' ...
    'specific angular momentum %f %% \n' ...
    'inclination %f %% \n' ...
    'RA of ascending node %f %% \n' ...
    'eccentricity %f %% \n' ...
    'perigee argument %f %% \n' ...
    'true anomaly(2) %f %% \n'], ...
    trueValues);

fprintf(['Error' ...
    'R(2) %f %% \n' ...
    'V(2) %f %% \n' ...
    'specific angular momentum %f %% \n' ...
    'inclination %f %% \n' ...
    'RA of ascending node %f %% \n' ...
    'eccentricity %f %% \n' ...
    'perigee argument %f %% \n' ...
    'true anomaly(2) %f %% \n'], ...
    100.*(measuredValues./trueValues-1));

%% Testing observation Stellarium
mu = 3.986004418E14 /1000^3;
deg = pi/180;
rReal = [3704; 2109; 5283];
vReal = [-4.53; 6.14; 0.72];

t = [54*60, 56*60+50, 58*60+33]; % time [seconds]
alfa = deg*([...
    20+58/60+11.81/3600; ...
    1+39/60+12.08/3600; ...
    7+15/60+37.05/3600]/24*360); % right ascension [deg]
delta = deg*([...
    5+6/60+8.5/3600; ...
    52+4/60+6.3/3600; ...
    26+39/60+12.4/3600]); % declination [deg]
theta = deg*[...
    1+57/60+3.1/3600; ...
    1+59/60+53.6/3600;...
    2+1/60+37.3/3600]/24*360; % local (mean) sidereal time [deg]
% theta = deg*[...
%     1+57/60+2.4/3600; ...
%     1+59/60+52.9/3600;...
%     2+1/60+36.5/3600]/24*360; % apparent sidereal time [deg]
phi = deg*(51+13/60+12.72/60/60); % geodetic latitude
Re = 6378; % Earth Radius 
f = 0.003353; % Earth oblateness
H = 0; % local altitude

R = findStationPosition(phi, theta, Re, f, H);
rho = angles2directionCosines(alfa, delta);

[r,v] = observation2state(R, rho, t, mu, true);
orbitalElements = state2orbitalElements(r, v, mu);
plotFromOE(orbitalElements, mu, r)
